Create class SavingsAccount. Use a static variable annualInterestRate to store the 
annual interest rate for all account holders. Each object of the class contains a private 
instance variable savingsBalance indicating the amount the saver currently has on 
deposit. Provide method calculateMonthlyInterest() to calculate the monthly 
interest by multiplying the savingsBalance by annualInterestRate divided by 
12.This interest should be added tosavingsBalance. Provide a static method 
modifyInterestRate() that sets the annualInterestRate to a new value. Write a 
program to test class SavingsAccount. Instantiate two savingsAccount objects, 
saver1 and saver2, with balances of Rs2000.00 and Rs3000.00, respectively. Set 
annualInterestRate to 4%, then calculate the monthly interest and print the new 
balances for both savers. Then set the annualInterestRate to 5%, calculate the next 
monthâ€™s interest and print the new balances for both savers

#include<iostream>
using namespace std;

class savingAccount
{
    static int rate;
    float balance;

    public:
        void input()
        {
            cout<<"Enter balance \n";
            cin>>balance;
        }
        void calMonthlyInterest()
        {
            float interest= (balance*rate)/12.0;
            balance= balance+interest;
        }
        void disp()
        {
            cout<<"The balance is : "<<balance<<endl;

        }
        static void modifyInterest(int x)
        {
            rate=x;
        }
};
int savingAccount :: rate=4;

int main()
{
    savingAccount saver1, saver2;
    saver1.input();
    saver2.input();
    cout<<"Current Rate of interest is 4%\n";
    saver1.calMonthlyInterest();
    saver1.disp();
    saver2.calMonthlyInterest();
    saver2.disp();
    cout<<"Setting new interest rate at 5%\n";
    savingAccount::modifyInterest(5);
    cout<<"After setting the interest rate at 5%\n";
    saver1.calMonthlyInterest();
    saver1.disp();
    saver2.calMonthlyInterest();
    saver2.disp();
    return 0;
}
