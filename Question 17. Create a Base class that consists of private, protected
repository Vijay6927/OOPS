Question 17. Create a Base class that consists of private, protected and public data members and member functions. Try using different access modifiers for inheriting Base class to the Derived class and create a table that summarizes the above three modes (when derived in public, protected and private modes) and shows the access specifier of the members of base class in the Derived class.

#include <iostream>

class Base {
private:
    int privateMember;   // Private member
protected:
    int protectedMember; // Protected member
public:
    int publicMember;    // Public member

    Base(int privateVal, int protectedVal, int publicVal)
        : privateMember(privateVal), protectedMember(protectedVal), publicMember(publicVal) {}

    void display() {
        std::cout << "Private: " << privateMember << ", Protected: " << protectedMember
                  << ", Public: " << publicMember << std::endl;
    }
};

class DerivedPublic : public Base {
public:
    // Inherited members maintain their access specifiers
    DerivedPublic(int privateVal, int protectedVal, int publicVal) : Base(privateVal, protectedVal, publicVal) {}
};

class DerivedProtected : protected Base {
public:
    // Inherited members become protected
    DerivedProtected(int privateVal, int protectedVal, int publicVal) : Base(privateVal, protectedVal, publicVal) {}
};

class DerivedPrivate : private Base {
public:
    // Inherited members become private
    DerivedPrivate(int privateVal, int protectedVal, int publicVal) : Base(privateVal, protectedVal, publicVal) {}
};

int main() {
    // Creating objects
    DerivedPublic objPublic(1, 2, 3);
    DerivedProtected objProtected(4, 5, 6);
    DerivedPrivate objPrivate(7, 8, 9);

    // Accessing members using the derived class objects
    // For DerivedPublic, all members are accessible
    std::cout << "DerivedPublic: ";
    objPublic.display();

    // For DerivedProtected and DerivedPrivate, only public members are accessible
    std::cout << "DerivedProtected: ";
    // objProtected.display();  // This would result in a compilation error due to protected access
    std::cout << "DerivedPrivate: ";
    // objPrivate.display();    // This would result in a compilation error due to private access

    return 0;
}
Qu
