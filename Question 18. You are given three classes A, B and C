Question 18. You are given three classes A, B and C. All three classes implement their own version of func. In class A, func multiplies the value passed as a parameter by 2. In class B, func multiplies the value passed as a parameter by 3. In class C, func multiplies the value passed as a parameter by 5.You are given class D such that You need to modify the class D and implement the function update_val which sets D's val to new_val by manipulating the value by only calling the func defined in classes A, B and C.It is guaranteed that new_val has only 2, 3 and 5 as its prime factors. Implement class D's function update_val. This function should update D's val only by calling A, B and C's func. Sample Input new_val = 30 Sample Output A's func called 1 times B's func called 1 times C's func called 1 times.
#include <iostream>

class A {
public:
    void func(int &val) {
        val *= 2;
        std::cout << "A's func called 1 times" << std::endl;
    }
};

class B {
public:
    void func(int &val) {
        val *= 3;
        std::cout << "B's func called 1 times" << std::endl;
    }
};

class C {
public:
    void func(int &val) {
        val *= 5;
        std::cout << "C's func called 1 times" << std::endl;
    }
};

class D : public A, public B, public C {
public:
    void update_val(int new_val) {
        // Initialize val with the new_val
        int val = new_val;

        // Call A's func as long as val is divisible by 2
        while (val % 2 == 0) {
            A::func(val);
        }

        // Call B's func as long as val is divisible by 3
        while (val % 3 == 0) {
            B::func(val);
        }

        // Call C's func as long as val is divisible by 5
        while (val % 5 == 0) {
            C::func(val);
        }

        // The updated value is now stored in val
        // You can use it as needed or store it in a member variable.
    }
int main() {
    D objD;
    objD.update_val(30);

    return 0;
}
