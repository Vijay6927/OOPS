Question 24. Templates are the foundation of generic programming, which involves writing code in a way that is independent of any particular type. Write a program that can create a list (create a class list) of given type (int, float, char etc.) and perform insertion and deletion on list object.
#include <iostream>

// Node class to represent each element in the list
template <typename T>
class Node {
public:
    T data;
    Node* next;

    Node(T val) : data(val), next(nullptr) {}
};

// List class using templates
template <typename T>
class List {
private:
    Node<T>* head;

public:
    List() : head(nullptr) {}

    // Function to insert a new element at the end of the list
    void insert(T val) {
        Node<T>* newNode = new Node<T>(val);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node<T>* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    // Function to delete an element from the list
    void remove(T val) {
        Node<T>* current = head;
        Node<T>* prev = nullptr;

        while (current != nullptr && current->data != val) {
            prev = current;
            current = current->next;
        }

        if (current == nullptr) {
            std::cout << "Element not found in the list." << std::endl;
            return;
        }

        if (prev == nullptr) {
            head = current->next;
        } else {
            prev->next = current->next;
        }

        delete current;
    }

    // Function to display the elements in the list
    void display() const {
        Node<T>* temp = head;
        while (temp != nullptr) {
            std::cout << temp->data << " ";
            temp = temp->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    // Create a list of integers
    List<int> intList;
    intList.insert(10);
    intList.insert(20);
    intList.insert(30);
    intList.display();

    // Create a list of characters
    List<char> charList;
    charList.insert('A');
    charList.insert('B');
    charList.insert('C');
    charList.display();

    // Create a list of floats
    List<float> floatList;
    floatList.insert(3.14);
    floatList.insert(6.28);
    floatList.display();

    // Delete an element from the integer list
    intList.remove(20);
    intList.display();

    return 0;
}
